/*
 *  Copyright 2020 Chris Margonis
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion 30
    defaultConfig {
        applicationId "com.ultimus.distantworlds_muzei"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 6
        versionName "3.2"

        def distantWorldsAuthorityValue = "com.ultimus.distantworlds"
        buildConfigField "String", "DISTANT_WORLDS_AUTHORITY", "\"${distantWorldsAuthorityValue}\""

        def distantWorlds2AuthorityValue = "com.ultimus.distantworlds_two"
        buildConfigField "String", "DISTANT_WORLDS_TWO_AUTHORITY", "\"${distantWorlds2AuthorityValue}\""

        manifestPlaceholders = [distantWorldsAuthority: distantWorldsAuthorityValue, distantWorlds2Authority: distantWorlds2AuthorityValue]

        Properties apiProps = getImgurApiProperties()
        def imgurClient = apiProps["imgur_client_id"]
        buildConfigField "String", "IMGUR_CLIENT_ID", "\"${imgurClient}\""

        def imgurDWAlbum = apiProps["imgur_dw_album_id"]
        buildConfigField "String", "IMGUR_DW_ALBUM", "\"${imgurDWAlbum}\""

        def imgurDW2Album = apiProps["imgur_dw2_album_id"]
        buildConfigField "String", "IMGUR_DW2_ALBUM", "\"${imgurDW2Album}\""
    }

    buildTypes {
        debug {
            versionNameSuffix " Debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "default"

    productFlavors {
        global {
            dimension "default"
            matchingFallbacks = ['passenger']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "androidx.core:core-ktx:1.3.1"
    implementation "androidx.appcompat:appcompat:$supportVersion"
    implementation "androidx.work:work-runtime-ktx:$workManagerVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintVersion"
    implementation "com.google.android.material:material:$materialComponents"

    implementation "com.google.android.apps.muzei:muzei-api:3.4.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit"
    implementation "com.squareup.okhttp3:okhttp:$okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp"

    implementation "com.google.code.gson:gson:$gson"

    implementation "com.google.firebase:firebase-core:$firebaseCore"
    implementation "com.google.firebase:firebase-crashlytics:$firebaseCrashlyticsVersion"

    androidTestImplementation "androidx.test:runner:$androidTestRunner"
    androidTestImplementation "androidx.test:rules:$androidTestRunner"
    // Optional -- UI testing with Espresso
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoCore"
}

